<?php  //[STAMP] 1642aac063f0af01df552d9daa5a17bf
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait FunctionalTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param int $timeout : timeout period
     * @throws ModuleException
     * @see \tests\codeception\common\_support\Helper\AcceptanceHelper::waitAjaxLoad()
     */
    public function waitAjaxLoad($timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitAjaxLoad', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param int $timeout : timeout period
     * @throws ModuleException
     * @see \tests\codeception\common\_support\Helper\AcceptanceHelper::waitPageLoad()
     */
    public function waitPageLoad($timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('waitPageLoad', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $link : Link that need to navigate
     * @param int $timeout : timeout
     * @throws ModuleException
     * @see \tests\codeception\common\_support\Helper\AcceptanceHelper::amOnPage()
     */
    public function amOnPage($link, $timeout = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnPage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $identifier
     * @param null $elementID
     * @param null $excludeElements
     * @param bool $element
     * @throws ModuleException
     * Conditional Assertion: Test won't be stopped on fail
     * @see \tests\codeception\common\_support\Helper\AcceptanceHelper::dontSeeVisualChanges()
     */
    public function cantSeeVisualChanges($identifier, $elementID = null, $excludeElements = null, $element = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeVisualChanges', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $identifier
     * @param null $elementID
     * @param null $excludeElements
     * @param bool $element
     * @throws ModuleException
     * @see \tests\codeception\common\_support\Helper\AcceptanceHelper::dontSeeVisualChanges()
     */
    public function dontSeeVisualChanges($identifier, $elementID = null, $excludeElements = null, $element = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeVisualChanges', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @throws ModuleException : throws exceptions if an error detects in JS
     * Conditional Assertion: Test won't be stopped on fail
     * @see \tests\codeception\common\_support\Helper\AcceptanceHelper::dontSeeJsError()
     */
    public function cantSeeJsError() {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeJsError', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @throws ModuleException : throws exceptions if an error detects in JS
     * @see \tests\codeception\common\_support\Helper\AcceptanceHelper::dontSeeJsError()
     */
    public function dontSeeJsError() {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeJsError', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Get current url from WebDriver
     * @return mixed
     * @throws \Codeception\Exception\ModuleException
     * @see \tests\codeception\common\_support\Helper\AcceptanceHelper::getCurrentUrl()
     */
    public function getCurrentUrl() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getCurrentUrl', func_get_args()));
    }
}
